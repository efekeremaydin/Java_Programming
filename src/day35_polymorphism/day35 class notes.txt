Java Programming Day35

Topics: Polymorphis Intro

package name: day35_polymorphism

// Inheritance is a MUST before pm to happen.
- it just adds a new flavour to inheritance


warmup tasks:
	1. Create an abstract class named Transpotation
				Variables:
					make (final), model (final), color, year(final), price

				Encapsulate all the fields

				Add a constructor that can set all the fields

				abstract methods:
					transportPeople();
					start();

				non abstract methods:
					stop(): "Shut off the engine"
					toString()

	2. Create an interface named AutoPark

				abstract methods:
					autoPark()

	3. Create a sub interface of AutoPark named AutoPilot:

				abstract methods:
						autoPilot()

	4. Create an interface named Electric

				abstract methods:
					charge()


	5. Create an abstract sub class of Transpotation named Car

				extra methods:
					drive()


	6. Create an abstract sub class of Transpotation named Plane that implements Flyable

				non-abstract method:
					land()


	7. Create a sub class of car named Audi that implements AutoPark
	

	8. Create a sub class of Car named Tesla that implements AutoPark, AutoPilot and Electric




Abstract class vs interface: both are used for achieving abstraction
							 both can not be instantiated
							 both are meant to be inherited
							 both can not be final



						 abstract class: one class can extend one abstract class ONLY

						 				instance & statics both are supported

						 				constructor (only to init inst) // you can't create objects

						 				4 access modifiers are supported // encaps possible

						 				//can't be instantiated
						 				// mult inheritance not allowed
						 				// can have const
						 				// can have instance, static, abs m
						 				// can have instance and static var
						 				// can't be final
						 				// can use other am than public


						 interface: one class can implement multiple interfaces
						            // Why do we need? cuz we need additional methods to whichever class needs it // ALSO FOR MULTIPLE INHERITANCE
						            // can't have c, instance or statics
						            // encaps not possible. cuz first interface doesnt have inst var. second, until Java 9 the only access modifier you could use was public, after java 9 private am for static methods. So technically only am can be used is public
						            // can't be instantiated
						            // mult inheritance IS allowed
						            // can't have const
						            // can have static abs default m, no instance (however with java 8 default m added, so it gave interface the capability of instance method
						            // can ONLY have static var (final by default)
						            // can't be final
						            // can't use am other than public & private (for static m)




extends vs implements:
		
		extends:
			class extends class
			interface extends interface(s)

		implements:
			class implements interface(s)

		extends & implements:
				extends first then implements

				// one interface can extend multiple interfaces

				// Functional interfaces is for Lambda expressions. Interfaces we use here is for non-funct only


// POLYMORPHISM (MANY FORMS)
Ability of one object to exist in multiple forms
So animal object can be dog and person object can be delivery man
creator of a game/show to also be the player, host, other characters etc (squid game)
pre-cond is IS-A relationship
parent class/interface, object are concrete subclasses
parent has the ability of taking form of child class object (even though it's an abstract parent)
    Animal animal1 = new Dog(); as long as Dog is extending Animal class
    Flyable animal4 = new Eagle(); as long as Eagle is implementing Flyable interface

Adv

//PM RULES
Parent ref to the child obj
In order to determine the class of an obj we use instanceof keyword
Parent as ref obj can be any child class - this will be handy when we do the projects
Inheritance is the pre-condition
You can only call m and var from the ref type (this can be a disadv. For example you can't call bark m from Dog class if you PM Animal to Dog class. And for this we have REFERENCE TYPE CASTINGS)
Obj type will determine which impl of m will be executed (whether it's an overr m or not)

Task:
	 Employee[] employees = {
                new Tester("Hamza", 32, 'M', "A01", "QA", 110000),
                new Developer("Lucy", 27, 'F', "A02", "Java Developer", 128000, "Java"),
                new Tester("George", 28,'M', "A03", "SDET", 120000),
                new Developer("Yulia", 23, 'F',"A04", "Software Developer", 135000, "Python"),
                new Tester("Cihad", 30, 'M',"A05", "SDET", 105000),
                new Developer("Gulistan",  26, 'F', "A06", "Web Developer", 130000, "Python"),
                new Tester("Nora",  28, 'F', "A07", "QE", 120000),
                new Driver("Aaron", 48, 'M', "D1", "Truck Driver", 90000),
                new Developer("Diana",  29, 'F', "A08", "Front-end Developer", 140000, "C#"),
                new Tester("Tatiana",  25, 'F',"A09", "SDET", 130000),
                new Developer("Alena",  26, 'F',"A10", "Back-end Developer", 150000, "Java"),
                new Tester("Timur",  29, 'M',"A11", "SDET", 115000),
                new Teacher("James", 45,  'M', "B1", "Math Teacher", 75000),
                new Developer("Hasan",  26, 'F', "A12", "Full Stack Developer", 142000, "Java"),
                new Tester("Nataliia",  24, 'F', "A13", "QE", 125000),
                new Developer("Ermek",  26, 'M',"A14", "Full Stack Developer", 142000, "Java"),
                new Tester("Khashayar",  30, 'M',"A15", "SDET", 105000),
        };

1. Print the name and Job Title of every employee
2. How many developers do we have?
3. How many testers do we have?
4. How many teachers do we have?
5. How many Drivers do we have?
6. Display the names of employees who are not developers





