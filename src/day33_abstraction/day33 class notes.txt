Java Programming Day33

Topics: OOP Abstraction
			- Abstract Method
			- Abstract Class

Package name: day33_abstraction

Warmup tasks:
	1. Create a sub class of Person (from day32 package) named CydeoDevStudent (final)
			Extra Variables:
				id (final), batchName, batchNumber, programmingLanguage(static & final)

			Extra conditions:
					1. Age has to be at least 18 years old
					2. batchName can ONLY be set to "Zero to Hero" or "Alumni Dev"
					3. batchNumber can not be set to zero or negative

			Override the eat() & drink() methods and include the programmingLanguage variable in methods body

			Override the toString Method and include the id, batchName, batchNumber variables


// ABS
Abs and pm nly possible if there's inheritance
Abs is simply ignoring the details and focusing only relevant properties of the problem
Details must be done by the sub classes

***
- Process of hiding impl from the user
- Only the funct will be provided to user
- Focus on essentials, ignore irrelevant and unimportant
- User will have info on what the object does instead of how
***

- just focus on the creation of the method rather than details of impl.

*Abs M
- no body, only signature
- m that's meant to be overr.
- abstract keyword is used to create abs m

public abstract void eat(); // m w/out body so needs to be overr. in the subclasses. diff impl is resp of child classes.
public abstract double area();

*RULES
- needs to adhere to overr. rules (static final private can never be abs)
- does not have a body
- can only be created in an abs class or in an interface

ABS Class
- meant to be super class
- goal is to provide reusable vars and m to sub classes
- abstract keyword is used to create
- abs class can't be instantiated

public abstract class Animal{}

If you want to decide whether a subclass can be abs or not you need to ask 2 q:
1. is this subclass going to be parent -> if yes then it can be abs
2. am i going to create object from this class -> if yes then it can't be abs

OOP Abstractrion:
		1. abstrct method
		2. abstract class
		3. interface
		4. extends vs implements

IMP
Parent class' abstract methods must be overriden in child (non-abstract) class



methods:
	
	public static void methodName(Paremeters) { normally you need to provide the body otherwise you will get compiler error }




employeeTask
	
	Employee:
		Variables:
			name, age, gender, id, jobTitle, salary ....

		Methods:
		  abstract work(); // incompl met

    Teacher:
    	work(){ teaching } // child resp to compl


	Developer:
		work() { coding }

	Tester:
		work(){ testing }

	Driver:
		work() { driving }

	...




























