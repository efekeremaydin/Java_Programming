Java Programming Day34

Topics: OOP Abstraction
			- Interface


recap

package name: day34_abstraction

warmup tasks:
	1. Create an abstract class named Car
			variables:
				make (final), model (final), color, year (final), price

			Encapsulate all the fields
				Conditions:
					1. year can not be less than 1886
					2. price can not be less than negative or zero

			Add a constructor that can set all the fields
				Note: Class name can be set to the make of the car

			Methods:
				stop() (final): prints "Presse the brake"

				start() (abstract)

				toString(): prints the given car info when a car object is passed in the print statement

	2. Create the following sub classes of Car
			1. Honda
			2. Audi
					extra methods:
						autoPark()
			3. Tesla
					extra methods:
						autoPilot()

INTERFACE
- 2nd way of achieving abs
- 1st way is thru abs m in which you can hide the impl
- abs m can be created in abs class or in an interface
- abs class is used when abs class needs to be a parent of all sub classes to define vars and ms
    - disadv of parent class: subclasses need to inherit everything that parent class has. that's why only the common var and m are declared
    - if 30% of the features are common in child classes, even then you can't add that to the parent class. that why in these scenarios we need to apply multiple inheritance:
        - one class can only extend one class
        - that's why to fill that gap there's interface. one class can inherit from multiple interfaces.
INTERFACE
- blueprint of a class (and class is a blueprint of an object)
- interface is the keyword
- with interface we have the ability to declare additional methods that classes need
- not all the methods can be inherited from parent, some methods should be inherited from interface
- interface is used to achieve 100% abs
- interface acts as a CONTRACT (Parrot and Eagle have contract with Flyable. Dog and Cat don't need that contract)
- Airplane is not a subclass of animal but still can use flyable

- One class can only extend to another class but can implement multiple interfaces
- Interface accepts multiple inheritance
- ONLY way to achieve multiple inheritance is through interface
- Interface provides additional methods
- Creating m one time is better, as it increases reusability

Properties of INTERFACE
- it's not a class, so you can't have any instances as instances belong to the obj and objs come from class
- for var, we can only have static vars, by default these vars declared as final
- interface can have static, abs and default m, so it can't have any instance method (before java 8 there was only abs m in interface, after java 8 static and def m added)
    - def m can be treated as an inst m once inherited
- public is the only access m. and given by default
    - after java 9 private was also added (only if static m)
    - so encapsulation is not possible
    - so we still need abs class
- abs keyword is given by default
- var: static & final only
- m: static abs and def methods only

What interface CANNOT have?
- inst var
- inst m
- const. (const is used to create obj, since obj can't be created from interface, there can't be const in the interface)
- init. blocks
- obj

THAT'S WHY WE STILL NEED THE ABS CLASS

To Implement
- implements keyword
- multiple inheritance allowed
- class is responsible for overriding all the abs methods from that interface
- extend keyword should be used first
- when you impl from interface vars will be static and final by default as they need to be same in all inherited classes
    - ms are abs and public by default

NEXT
- two types of interface, funct and non-funct.
- non-funct. => inheritence purposes
- funct. => Lambda expressions


Animal task:
	interface Swimmable
		swim()

	interface Flyable
			fly();

	interface Wild:
			hunt();

	interface Plyable
			play();

			
	abstractClass Animal:
		eat();
		drink();



	Dog extend Animal implements Plyable, Swimmable

	Cat extend Animal implements Plyable

	Cow extend Animal implements Plyable

	Horse extend Animal implements Plyable

	Parrot extend Animal implements Plyable, Flyable

	Eagle extend Animal implements Wild, Flyable

	Tiger extend Animal implements Wild

	Lion extend Animal implements Wild

	Falcon extend Animal implements Wild, Flyable

	Shark extend Animal implements Wild, Swimmable

	Dolphin extend Animal implements Plyable, Swimmable

	Duck extend Animal implements Plyable, Swimmable, Flyable

	Java extend Animal implements Plyable, Swimmable, Flyable, Wild



Person implement Swimmable, Playable // you dont have to have IS A relationship with the animal

Boat implement Swimmable

Airpalne implements Flyable

CydeoCar implement Swimmable, Flyable

PlayStation implements Playable



















