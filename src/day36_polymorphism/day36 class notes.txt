Java Programming Day36

Topics: Reference Type Castings
		OOP Recap

package name: day36_polymorphism

Warmup task:
	Given the following array:
		Phone[] phones = {
                new IPhone("Iphone 11 Pro", "Large", "Black", 900),
                new IPhone("Iphone 12 Pro Max", "Large", "Black", 1200),
                new IPhone("Iphone 9", "Medium", "Gold", 800),
                new Samsung("Galaxy S19", "Medium", "Pink", 700),
                new Samsung("Galaxy S20", "Large", "Silver", 850),
                new Samsung("Galaxy S21", "Large", "Red", 950),
                new Nokia("XR20", "Small", "Blue", 350),
                new Nokia("G10", "Medium", "Gray", 99),
                new Nokia("G50", "Large", "Silver", 250),
                new IPhone("Iphone 12 Pro", "Large", "Black", 1200),
                new IPhone("Iphone 11 Pro Max", "Large", "Silver", 1100),
                new Samsung("Galaxy S18", "Medium", "White", 750),
                new Samsung("Galaxy S17", "Large", "Silver", 650),
                new Nokia("G10", "Medium", "Black", 99),
                new IPhone("Iphone 6", "Smalle", "Gold", 400),
                new IPhone("Iphone 7", "Smalle", "White", 500)
        };


    1. print the model, color and price of each phone object in the following format
    				model - color - price

	2. How many Iphones in the array of phones?

	3. How many Samsungs in the array of phones?

	4. Display the models of Iphones and samsung that has the price of 700 or greater


//
castings: converting one type to another

2 types of type castings:
		
		1. Primitive Type Castings: must happen between primitives

				1. implicit primitive type casting: casting smaller primitive type to larger primitive type  (done implicitly)

								int a = 100;
								double b = a; // implicitly casted to double

				2. explicit primitive type casting: casting larger primitive type to smaller primitive type

								long a = 100;
								short b = (short)a;



		2. Reference Type Castings: THERE MUST BE INHERITANCE

			  1. Upcasting: casting the sub type to super type (done implicitly) // THIS WOULD ALLOW US TO DO PM. THAT'S WHY WE NEVER GET COMPILER ERROR FOR BELOW

			  			Car car	= new BMW();

			  2. Downcasting: casting the super type to sub type (done explicitly)
			  // we need this due to the rule of the pm




OOP Polymorphsim: parent type being referenced to the child object
				 ability of the objects to take on many forms
				 // so this can be applied to methods as well, which is called runtime pm (m overr) and compile time pm (m overl)

				 "IS A" relation is a must

				 Reference type can be either parent class or parent interface, and object must be created from child class

				 Reference Type decides what can be accessed/called
				 		(if we need to access the features that are in object type, but not in the reference type, then we need down casting)

		 		 Object type decidesw hich implementation will be executed





Runtime polymorphism (dynamic polymorphism): method overriding // called like this as impl only revealed during runtime, you never know until running the code
										one method with multiple implementations (revealed during the run time)


										eat():

										implementation1: Baklava
										implementation2: Java
										...



compile time polymorphism (static polymorphism) : method overloading
						   multiple methods with the same name
						   each method has one implementation ONLY ( revealed during the compile time)


						   add(num1, num2)
						   add(num1, num2, num3)


//equals m is a great example of pm

// we need to know each OOP principles and what are they used for so that we are comfortable using them in our projects


















